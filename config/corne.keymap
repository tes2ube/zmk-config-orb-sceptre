/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi {
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>;
};

&led_strip {
    chain-length = <27>;
};

&lt {
    flavor = "balanced";
};

&mt {
    flavor = "balanced";
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SEMI COMMA DOT SLASH>;
};

/* Homerow mods

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(lt, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(lt, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(lt_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(lt_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(lt_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

*/

/ {
    behaviors {
        ht_ml3k_L: ht_ml3k_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_ML3K_L";
            bindings = <&m_mL3>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        ht_L: ht_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        md_bkdl: md_bkdl {
            compatible = "zmk,behavior-mod-morph";
            label = "MD_BKDL";
            bindings = <&kp BSPC>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        d_gresc: d_gresc {
            compatible = "zmk,behavior-tap-dance";
            label = "D_GRESC";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;

            tapping-term-ms = <350>;
        };

        d_apqt: d_apqt {
            compatible = "zmk,behavior-tap-dance";
            label = "D_APQT";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp LS(Q)>;

            tapping-term-ms = <275>;
        };

        d_cmcl: d_cmcl {
            compatible = "zmk,behavior-tap-dance";
            label = "D_CMCL";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LS(W)>;
        };

        d_pdcr: d_pdcr {
            compatible = "zmk,behavior-tap-dance";
            label = "D_PDCR";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LS(E)>;

            tapping-term-ms = <275>;
        };

        d_scco: d_scco {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SCCO";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp LS(Z)>;

            tapping-term-ms = <275>;
        };

        d_slqm: d_slqm {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SLQM";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LS(LEFT_BRACKET)>;

            tapping-term-ms = <275>;
        };

        ht_l1kr: ht_l1kr {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L1KR";
            bindings = <&m_mL1>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        ht_l1k_R: ht_l1k_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L1K_R";
            bindings = <&m_mL1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ht_l2k_L: ht_l2k_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L2K_L";
            bindings = <&m_mL2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        ht_ml3bk_R: ht_ml3bk_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_ML3BK_R";
            bindings = <&m_mL3>, <&md_bkdl>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        d_and: d_and {
            compatible = "zmk,behavior-tap-dance";
            label = "D_AND";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&ms_and>;

            tapping-term-ms = <275>;
        };

        ht_xvk: ht_xvk {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_XVK";
            bindings = <&m_xv>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
        };

        ht_cvk: ht_cvk {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CVK";
            bindings = <&m_cv>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
        };

        d_cvk: d_cvk {
            compatible = "zmk,behavior-tap-dance";
            label = "D_CVK";
            #binding-cells = <0>;
            bindings = <&ht_cvk 0 GRAVE>, <&kp TILDE>;

            tapping-term-ms = <350>;
        };

        ht_R: ht_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };
    };

    macros {
        ms_wrkD: ms_wrkD {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none &kp M &kp G &kp K &kp K &kp D &kp L &kp N8 &kp LS(J) &kp LS(D) &kp LS(A) &kp LS(H) &kp LS(P) &kp LS(S) &kp LS(I) &kp LS(V) &kp N8 &kp G &kp L &kp DOT &kp A &kp H &kp D &kp N4 &kp DOT &kp D &kp L &kp S &kp M &kp S &kp F &kp SEMI>,
                <&macro_tap>,
                <&kp RET>;

            label = "MS_WRKD";
            tap-ms = <40>;
        };

        ms_wrkQ: ms_wrkQ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none &kp M &kp I &kp T &kp T &kp E &kp N &kp N8 &kp LS(H) &kp LS(E) &kp LS(A) &kp LS(D) &kp LS(L) &kp LS(O) &kp LS(C) &kp LS(K) &kp N8 &kp I &kp N &kp V &kp A &kp D &kp E &kp N4 &kp V &kp E &kp N &kp O &kp M &kp O &kp U &kp S>,
                <&macro_tap>,
                <&kp RET>,
                <&macro_release>,
                <&kp RET>;

            label = "MS_WRKQ";
            tap-ms = <40>;
        };

        ms_mac: ms_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp SEMI &kp J &kp D &kp D &kp L &kp N6 &kp COLON &kp LT &kp LS(D) &kp LS(O) &kp GT &kp LS(D) &kp N9 &kp SEMI &kp K &kp O &kp A &kp L &kp U &kp D &kp O &kp N6 &kp C &kp G &kp L &kp B>,
                <&macro_tap>,
                <&kp RET>;

            label = "MS_MAC";
            tap-ms = <40>;
        };

        m_mL1: m_mL1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>;

            label = "M_ML1";
            wait-ms = <5>;
            tap-ms = <15>;
        };

        m_mL2: m_mL2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>;

            label = "M_ML2";
            wait-ms = <5>;
            tap-ms = <15>;
        };

        m_mL3: m_mL3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&sl 3>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>;

            label = "M_ML3";
            wait-ms = <5>;
            tap-ms = <10>;
        };

        m_bt1: m_bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &rgb_ug RGB_COLOR_HSB(0,100,12) &rgb_ug RGB_BRI &rgb_ug RGB_BRD>;
            label = "M_BT1";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt2: m_bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &rgb_ug RGB_COLOR_HSB(120,100,12) &rgb_ug RGB_BRI &rgb_ug RGB_BRD>;
            label = "M_BT2";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt3: m_bt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &rgb_ug RGB_COLOR_HSB(20,100,12) &rgb_ug RGB_BRI &rgb_ug RGB_BRD>;
            label = "M_BT3";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt4: m_bt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &rgb_ug RGB_COLOR_HSB(213,100,12) &rgb_ug RGB_BRI &rgb_ug RGB_BRD>;
            label = "M_BT4";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt5: m_bt5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &rgb_ug RGB_COLOR_HSB(300,100,12) &rgb_ug RGB_BRI &rgb_ug RGB_BRD>;
            label = "M_BT5";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        ms_and: ms_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp H &kp SPACE>;
            label = "MS_AND";
        };

        mp_hmL: mp_hmL {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "MP_HML";
        };

        m_2cmd: m_2cmd {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "M_2CMD";
        };

        m_xv: m_xv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(B) &rgb_ug RGB_SAD &rgb_ug RGB_SAD>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(DOT) &rgb_ug RGB_SAI &rgb_ug RGB_SAI>;

            label = "M_XV";
        };

        m_cv: m_cv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(I) &rgb_ug RGB_BRI &rgb_ug RGB_BRI>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(DOT) &rgb_ug RGB_BRD &rgb_ug RGB_BRD>;

            label = "M_CV";
        };
    };

    combos {
        compatible = "zmk,combos";

        c_resetR {
            bindings = <&sys_reset>;
            key-positions = <30 19 32 31>;
            timeout-ms = <400>;
            slow-release;
            layers = <3>;
            require-prior-idle-ms = <3000>;
        };

        c_parL {
            bindings = <&kp LPAR>;
            key-positions = <1 2>;
            layers = <0>;
        };

        c_parR {
            bindings = <&kp RPAR>;
            key-positions = <3 4>;
            layers = <0>;
        };

        c_bktL {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        c_bktR {
            bindings = <&kp EQUAL>;
            key-positions = <10 9>;
            layers = <0>;
        };

        c_home {
            bindings = <&kp HOME>;
            key-positions = <15 16>;
        };

        c_end {
            bindings = <&kp END>;
            key-positions = <16 17>;
            require-prior-idle-ms = <200>;
        };

        c_btReset {
            bindings = <&bt BT_CLR>;
            key-positions = <39 40 41>;
            timeout-ms = <50>;
            slow-release;
            layers = <3>;
        };

        c_metaL {
            bindings = <&kp LMETA>;
            key-positions = <13 22>;
        };

        c_cpwd {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        c_brcL {
            bindings = <&kp UNDER>;
            key-positions = <6 7 8>;
        };

        c_brcR {
            bindings = <&kp PLUS>;
            key-positions = <7 8 9>;
        };

        cp_wrkD {
            bindings = <&ms_wrkD>;
            key-positions = <22 17 13 20>;
            layers = <3>;
            require-prior-idle-ms = <1500>;
            timeout-ms = <1000>;
        };

        cp_wrkQ {
            bindings = <&ms_wrkQ>;
            key-positions = <14 27 28 30>;
            layers = <3>;
            require-prior-idle-ms = <1500>;
            timeout-ms = <1000>;
        };

        c_dol {
            bindings = <&kp DLLR>;
            key-positions = <36 28 27>;
        };

        c_bslh {
            bindings = <&kp BSLH>;
            key-positions = <37 28>;
        };

        c_pipe {
            bindings = <&kp PIPE>;
            key-positions = <37 29>;
        };

        c_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <36 27>;
        };

        c_at {
            bindings = <&kp AT>;
            key-positions = <13 20>;
            require-prior-idle-ms = <300>;
        };

        c_us {
            bindings = <&kp LS(APOS)>;
            key-positions = <22 23>;
        };

        c_pgup {
            bindings = <&kp PAGE_UP>;
            key-positions = <30 31>;
            require-prior-idle-ms = <200>;
        };

        c_pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <31 32>;
            require-prior-idle-ms = <200>;
        };

        c_tg3 {
            bindings = <&to 3>;
            key-positions = <16 15 36>;
        };

        c_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 18>;
            require-prior-idle-ms = <400>;
        };

        c_tg2 {
            bindings = <&to 2>;
            key-positions = <37 16 15>;
        };

        c_tg1 {
            bindings = <&to 1>;
            key-positions = <38 15 16>;
        };

        c_spc {
            bindings = <&kp SPACE>;
            key-positions = <25 26 27 28>;
            timeout-ms = <200>;
        };

        c_bspc {
            bindings = <&md_bkdl>;
            key-positions = <25 26>;
            require-prior-idle-ms = <200>;
        };

        c_ret {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            require-prior-idle-ms = <200>;
        };

        c_cut {
            bindings = <&kp LC(B)>;
            key-positions = <12 14>;
        };

        c_paste {
            bindings = <&kp LC(DOT)>;
            key-positions = <24 26>;
            require-prior-idle-ms = <200>;
        };

        c_copy {
            bindings = <&kp LC(I)>;
            key-positions = <2 0>;
        };

        c_undo {
            bindings = <&kp LC(FSLH)>;
            key-positions = <25 27>;
        };

        c_redo {
            bindings = <&kp LC(LS(FSLH))>;
            key-positions = <13 15>;
        };

        c_altdo {
            bindings = <&kp LC(T)>;
            key-positions = <1 3>;
        };

        c_bx1 {
            bindings = <&bt BT_DISC 0>;
            key-positions = <6 26>;
            layers = <3>;
            require-prior-idle-ms = <1000>;
        };

        c_bx2 {
            bindings = <&bt BT_DISC 1>;
            key-positions = <26 7>;
            layers = <3>;
            require-prior-idle-ms = <1000>;
        };

        c_bx3 {
            bindings = <&bt BT_DISC 2>;
            key-positions = <8 26>;
            require-prior-idle-ms = <1000>;
            layers = <3>;
        };

        c_bx4 {
            bindings = <&bt BT_DISC 3>;
            key-positions = <8 26>;
            require-prior-idle-ms = <1000>;
            layers = <3>;
        };

        c_bx5 {
            bindings = <&bt BT_DISC 4>;
            key-positions = <8 26 10>;
            require-prior-idle-ms = <1000>;
            layers = <3>;
        };

        cp_mac {
            bindings = <&ms_mac>;
            key-positions = <16 19 20 21>;
            require-prior-idle-ms = <1500>;
            layers = <3>;
            timeout-ms = <1000>;
        };

        c_bootR {
            bindings = <&bootloader>;
            key-positions = <18 31 20 19>;
            slow-release;
            require-prior-idle-ms = <3000>;
            layers = <3>;
            timeout-ms = <400>;
        };

        c_bootL {
            bindings = <&bootloader>;
            key-positions = <17 16 15 28>;
            slow-release;
            require-prior-idle-ms = <3000>;
            layers = <3>;
            timeout-ms = <400>;
        };

        c_resetL {
            bindings = <&sys_reset>;
            key-positions = <29 28 27 16>;
            slow-release;
            require-prior-idle-ms = <3000>;
            layers = <3>;
            timeout-ms = <400>;
        };

        c_tg3R {
            bindings = <&to 3>;
            key-positions = <19 20 41>;
        };

        c_tg2R {
            bindings = <&to 2>;
            key-positions = <19 20 40>;
        };

        c_tg1R {
            bindings = <&to 1>;
            key-positions = <39 19 20>;
        };

        c_troubL {
            bindings = <&to 4>;
            key-positions = <0 29>;
            layers = <3>;
            require-prior-idle-ms = <3000>;
        };

        c_troubR {
            bindings = <&to 4>;
            key-positions = <30 11>;
            layers = <3>;
            require-prior-idle-ms = <3000>;
        };

        c_sa_L {
            bindings = <&kp LA(LSHFT)>;
            key-positions = <16 15>;
            require-prior-idle-ms = <170>;
            timeout-ms = <0>;
            layers = <0 2 1>;
        };

        c_sac_L {
            bindings = <&kp LA(LC(LSHFT))>;
            key-positions = <16 15 14>;
            require-prior-idle-ms = <170>;
            layers = <0 1 2>;
        };

        c_sacm_L {
            bindings = <&kp LA(LC(LG(LSHFT)))>;
            key-positions = <16 15 14 13>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_ac_L {
            bindings = <&kp LC(LALT)>;
            key-positions = <15 14>;
            require-prior-idle-ms = <170>;
            layers = <0 1 2>;
        };

        c_acm_L {
            bindings = <&kp LC(LG(LALT))>;
            key-positions = <15 14 13>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_cm_L {
            bindings = <&kp LG(LCTRL)>;
            key-positions = <14 13>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_sa_R {
            bindings = <&kp RA(RSHFT)>;
            key-positions = <19 20>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_sac_R {
            bindings = <&kp RA(RC(RSHFT))>;
            key-positions = <19 20 21>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_sacm_R {
            bindings = <&kp RA(RC(RG(RSHFT)))>;
            key-positions = <19 20 21 22>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_ac_R {
            bindings = <&kp RC(RALT)>;
            key-positions = <20 21>;
            require-prior-idle-ms = <170>;
            layers = <0 1 2>;
        };

        c_acm_R {
            bindings = <&kp RC(RG(RALT))>;
            key-positions = <20 21 22>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };

        c_cm_R {
            bindings = <&kp RG(RCTRL)>;
            key-positions = <21 22>;
            require-prior-idle-ms = <170>;
            layers = <0 2 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            bindings = <
&d_cvk          &d_apqt        &d_cmcl        &d_pdcr           &kp R            &kp T           &kp Y                        &kp U              &kp I         &kp O          &kp P             &d_slqm
&ht_xvk 0 HASH  &ht_L LMETA A  &ht_L LCTRL S  &ht_L LALT D      &ht_L LSHFT F    &kp G           &kp H                        &ht_R RSHFT J      &ht_R RALT K  &ht_R RCTRL L  &ht_R RMETA SEMI  &kp SQT
&d_and          &d_scco        &kp X          &kp C             &kp V            &kp B           &kp N                        &kp M              &kp COMMA     &kp DOT        &kp SLASH         &kp EXCL
                                              &ht_ml3k_L 0 ESC  &ht_l2k_L 0 TAB  &ht_l1kr 0 0    &ht_R LA(LC(LG(LSHFT))) RET  &ht_l1k_R 0 SPACE  &md_bkdl
            >;

            label = "orb|cptr";
        };

        num-sym {
            bindings = <
&kp W      &kp LBKT              &kp N7          &kp N8         &kp N9          &kp APOS    &trans  &kp C_RW      &kp C_STOP  &kp C_FF      &trans  &trans
&kp E      &ht_L LMETA ASTERISK  &ht_L LCTRL N4  &ht_L LALT N5  &ht_L LSHFT N6  &kp RBRC    &trans  &kp C_PREV    &kp C_PP    &kp C_NEXT    &trans  &trans
&kp CARET  &kp N0                &kp N1          &kp N2         &kp N3          &kp RBKT    &trans  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &trans  &trans
                                                 &to 0          &trans          &trans      &trans  &trans        &trans
            >;

            label = "num|sym";
        };

        nav-system {
            bindings = <
&trans              &trans                  &kp UP     &trans                   &trans               &trans    &mt PSCRN LC(PSCRN)   &kp F9          &kp F10             &kp F11         &kp F12         &trans
&kp LC(LEFT_ARROW)  &kp LEFT                &kp DOWN   &kp RIGHT                &kp LC(RIGHT_ARROW)  &trans    &kp C_AC_SCROLL_UP    &ht_R RSHFT F5  &ht_R RIGHT_ALT F6  &ht_R RCTRL F7  &ht_R RMETA F8  &trans
&kp LS(HOME)        &kp LC(LS(LEFT_ARROW))  &kp LA(E)  &kp LS(LC(RIGHT_ARROW))  &kp LS(END)          &trans    &kp C_AC_SCROLL_DOWN  &kp F1          &kp F2              &kp F3          &kp F4          &kp K_APP
                                                       &to 0                    &trans               &trans    &trans                &trans          &trans
            >;

            label = "nav-sys";
        };

        mir-keeb {
            bindings = <
&d_slqm   &kp P          &kp O          &kp I         &kp U          &kp Y     &m_bt1           &m_bt2           &m_bt3           &m_bt4                        &m_bt5  &out OUT_TOG
&kp APOS  &ht_L LMETA A  &ht_L RCTRL S  &ht_L RALT D  &ht_L RSHFT F  &kp H     &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF               &trans  &ext_power EP_TOG
&kp EXCL  &kp FSLH       &kp DOT        &kp COMMA     &kp M          &kp N     &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SPD  &rgb_ug RGB_COLOR_HSB(0,0,0)  &trans  &rgb_ug RGB_TOG
                                        &to 0         &trans         &trans    &trans           &trans           &trans
            >;

            label = "mir|keeb";
        };

        troubleshoot {
            bindings = <
&bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_CLR    &bt BT_CLR  &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1       &bt BT_SEL 0
&bt BT_DISC 0     &bt BT_DISC 1      &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none         &none       &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1      &bt BT_DISC 0
&ext_power EP_ON  &ext_power EP_OFF  &out OUT_BLE   &out OUT_USB   &bootloader    &sys_reset    &sys_reset  &bootloader    &out OUT_USB   &out OUT_BLE   &ext_power EP_OFF  &ext_power EP_ON
                                                    &to 0          &none          &none         &none       &none          &to 0
            >;

            label = "trouble";
        };
    };
};
