/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi {
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>;
};

&led_strip {
    chain-length = <27>;
};

&lt {
    flavor = "balanced";
};

&mt {
    flavor = "balanced";
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SEMI COMMA DOT SLASH COLON>;
};

/* Homerow mods

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(lt, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(lt, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(lt_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(lt_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(lt_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

*/

/ {
    behaviors {
        ht_L: ht_L {
            compatible = "zmk,behavior-hold-tap";
            label = "hold-tap (left)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <160>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        d_gresc: d_gresc {
            compatible = "zmk,behavior-tap-dance";
            label = "grave-escape";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;

            tapping-term-ms = <350>;
        };

        d_apqt: d_apqt {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance single and double quote";
            bindings = <&kp Q>, <&kp LS(Q)>;

            tapping-term-ms = <275>;
        };

        d_cmcl: d_cmcl {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance comma and caret left";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LS(W)>;

            tapping-term-ms = <275>;
        };

        d_pdcr: d_pdcr {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance period and caret right";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LS(E)>;

            tapping-term-ms = <275>;
        };

        d_scco: d_scco {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance semicolon and colon";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp LS(Z)>;

            tapping-term-ms = <275>;
        };

        d_slqm: d_slqm {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance fslash and question mark";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LS(LEFT_BRACKET)>;

            tapping-term-ms = <275>;
        };

        ht_l1rr_L: ht_l1rr {
            compatible = "zmk,behavior-hold-tap";
            label = "tap for repeat, hold for num|sys (left)";
            bindings = <&m_mL1>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        ht_l1k_R: ht_l1k_R {
            compatible = "zmk,behavior-hold-tap";
            label = "tap key, hold for momentary layer num|sys (right)";
            bindings = <&m_mL1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <165>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ht_l2k_L: ht_l2k_L {
            compatible = "zmk,behavior-hold-tap";
            label = "tap key, hold for momentary layer nav|func (left)";
            bindings = <&m_mL2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <165>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        ht_xvk: ht_xvk {
            compatible = "zmk,behavior-hold-tap";
            label = "tap key, hold cut, paste on release (left)";
            bindings = <&m_xv>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
        };

        ht_cvk: ht_cvk {
            compatible = "zmk,behavior-hold-tap";
            label = "tap key, hold copy, paste on release";
            bindings = <&m_cv>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <210>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
        };

        d_cvk: d_cvk {
            compatible = "zmk,behavior-tap-dance";
            label = "tap grave, hold for copy-paste, 2nd tap squiggle";
            #binding-cells = <0>;
            bindings = <&ht_cvk 0 GRAVE>, <&kp TILDE>;

            tapping-term-ms = <350>;
        };

        ht_R: ht_R {
            compatible = "zmk,behavior-hold-tap";
            label = "hold tap (right)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <160>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        d_plsatk: d_plsatk {
            compatible = "zmk,behavior-tap-dance";
            label = "dance, plus and asterisk";
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp STAR>;

            tapping-term-ms = <300>;
        };

        d_mindiv: d_mindiv {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance minus and divide";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp LBKT>;

            tapping-term-ms = <350>;
        };

        d_dotcom: d_dotcom {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance period and comma";
            #binding-cells = <0>;
            bindings = <&ht_L LGUI E>, <&kp W>;

            tapping-term-ms = <275>;
        };

        db_q: db_q {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror QP";
            #binding-cells = <0>;
            bindings = <&ht_L LS(Q) Q>, <&ht_L LS(P) P>;

            tapping-term-ms = <275>;
        };

        db_w: db_w {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror WO";
            #binding-cells = <0>;
            bindings = <&ht_L LS(W) W>, <&ht_L LS(O) O>;

            tapping-term-ms = <275>;
        };

        db_e: db_e {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror EI";
            #binding-cells = <0>;
            bindings = <&ht_L LS(E) E>, <&ht_L LS(I) I>;

            tapping-term-ms = <275>;
        };

        db_r: db_r {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror RU";
            #binding-cells = <0>;
            bindings = <&ht_L LS(R) R>, <&ht_L LS(U) U>;
        };

        db_t: db_t {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror TY";
            #binding-cells = <0>;
            bindings = <&ht_L LS(T) T>, <&ht_L LS(Y) Y>;
        };

        db_a: db_a {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror (HRM) A;";
            #binding-cells = <0>;
            bindings = <&ht_L LGUI A>, <&ht_L LS(SEMI) SEMI>;
        };

        db_s: db_s {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror (HRM) lctrl SL";
            #binding-cells = <0>;
            bindings = <&ht_L LCTRL S>, <&ht_L LS(L) L>;
        };

        db_d: db_d {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror (HRM) lalt DK";
            #binding-cells = <0>;
            bindings = <&ht_L LALT D>, <&ht_L LS(K) K>;
        };

        db_f: db_f {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror (HRM) lshft FJ";
            #binding-cells = <0>;
            bindings = <&ht_L LSHFT F>, <&ht_L LS(J) J>;
        };

        db_g: db_g {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror GH";
            #binding-cells = <0>;
            bindings = <&ht_L LS(G) G>, <&ht_L LS(H) H>;
        };

        db_z: db_z {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror Z fslsh";
            #binding-cells = <0>;
            bindings = <&ht_L LS(Z) Z>, <&ht_L LS(SLASH) SLASH>;
        };

        db_x: db_x {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror X period";
            #binding-cells = <0>;
            bindings = <&ht_L LS(X) X>, <&ht_L LS(DOT) DOT>;
        };

        db_c: db_c {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror C comma";
            #binding-cells = <0>;
            bindings = <&ht_L LS(C) C>, <&ht_L LS(COMMA) COMMA>;
        };

        db_v: db_v {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror VM";
            #binding-cells = <0>;
            bindings = <&ht_L LS(V) V>, <&ht_L LS(M) M>;
        };

        db_b: db_b {
            compatible = "zmk,behavior-tap-dance";
            label = "hold tap & mirror BN";
            #binding-cells = <0>;
            bindings = <&ht_L LS(B) B>, <&ht_L LS(N) N>;
        };

        d_reteql: d_reteql {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance return and equal";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RET>, <&kp RBKT>;
        };

        ht_l1spcto_R: ht_l1spcto_R {
            compatible = "zmk,behavior-hold-tap";
            label = "tap space &to layer 0, hold momentary layer num|sys";
            bindings = <&m_mL1>, <&m_2spcto>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <165>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ht_l2tabto0_L: ht_l2tabto0_L {
            compatible = "zmk,behavior-hold-tap";
            label = "tap tab &to 0, hold momentary layer nav|func";
            bindings = <&m_mL2>, <&m_2tabto0>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <165>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };
    };

    macros {
        ms_wrkD: ms_wrkD {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp M &kp G &kp K &kp K &kp D &kp L &kp N8 &kp LS(J) &kp LS(D) &kp LS(A) &kp LS(H) &kp LS(P) &kp LS(S) &kp LS(I) &kp LS(V) &kp N8 &kp G &kp L &kp DOT &kp A &kp H &kp D &kp N4 &kp DOT &kp D &kp L &kp S &kp M &kp S &kp F &kp SEMI>;
            label = "MS_WRKD";
            tap-ms = <40>;
        };

        ms_wrkQ: ms_wrkQ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp M &kp I &kp T &kp T &kp E &kp N &kp N8 &kp LS(H) &kp LS(E) &kp LS(A) &kp LS(D) &kp LS(L) &kp LS(O) &kp LS(C) &kp LS(K) &kp N8 &kp I &kp N &kp V &kp A &kp D &kp E &kp N4 &kp V &kp E &kp N &kp O &kp M &kp O &kp U &kp S>;
            label = "MS_WRKQ";
            tap-ms = <40>;
        };

        ms_mac: ms_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMI &kp J &kp D &kp D &kp L &kp N6 &kp COLON &kp LT &kp LS(D) &kp LS(O) &kp GT &kp LS(D) &kp N9 &kp SEMI &kp K &kp O &kp A &kp L &kp U &kp D &kp O &kp N6 &kp C &kp G &kp L &kp B>;
            label = "MS_MAC";
            tap-ms = <40>;
        };

        m_mL1: m_mL1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>;

            label = "momentary layer num|sys";
            wait-ms = <5>;
            tap-ms = <15>;
        };

        m_mL2: m_mL2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 5>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 5>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>;

            label = "momentary layer nav|func";
            wait-ms = <5>;
            tap-ms = <15>;
        };

        m_bt1: m_bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &rgb_ug RGB_COLOR_HSB(0,100,12)>;
            label = "M_BT1";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt2: m_bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &rgb_ug RGB_COLOR_HSB(120,100,12)>;
            label = "M_BT2";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt3: m_bt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &rgb_ug RGB_COLOR_HSB(20,100,12)>;
            label = "M_BT3";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt4: m_bt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &rgb_ug RGB_COLOR_HSB(213,100,12)>;
            label = "M_BT4";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt5: m_bt5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &rgb_ug RGB_COLOR_HSB(300,100,12)>;
            label = "M_BT5";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        ms_and: ms_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp H &kp SPACE>;
            label = "MS_AND";
        };

        mp_hmL: mp_hmL {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "param - tap key, hold momentary layer (left)";
        };

        m_2cmd: m_2cmd {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "param - key tap on press, different key tap on release";
        };

        m_xv: m_xv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(B) &rgb_ug RGB_SAD &rgb_ug RGB_SAD>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(DOT) &rgb_ug RGB_SAI &rgb_ug RGB_SAI>;

            label = "cut, paste on release";
        };

        m_cv: m_cv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(I) &rgb_ug RGB_BRI &rgb_ug RGB_BRI>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(DOT) &rgb_ug RGB_BRD &rgb_ug RGB_BRD>;

            label = "copy, paste on release";
        };

        mp_2key: mp_2key {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "param - taps 2 keys simultaneously";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        mp_alt02: mp_alt02 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N2 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LALT>;

            label = "param - alt code 02##";
        };

        mp_alt3: mp_alt3 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LALT>;

            label = "param - alt code 3##";
        };

        mp_2kto: mp_2kto {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;

            label = "param - simultaneous key tap &to layer";
        };

        m_2spcto: m_2spcto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp SPACE &to 0>;

            label = "simultaneous space &to 0 layer";
        };

        m_2tabto0: m_2tabto0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp TAB &to 0>;

            label = "simultaneous tab tap &to 0 layer";
        };
    };

    combos {
        compatible = "zmk,combos";

        c_parL {
            bindings = <&kp LPAR>;
            key-positions = <1 2>;
        };

        c_parR {
            bindings = <&kp RPAR>;
            key-positions = <3 4>;
        };

        c_bktL {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        c_bktR {
            bindings = <&kp EQUAL>;
            key-positions = <10 9>;
        };

        c_home {
            bindings = <&kp HOME>;
            key-positions = <15 16>;
        };

        c_end {
            bindings = <&kp END>;
            key-positions = <16 17>;
            require-prior-idle-ms = <200>;
        };

        c_meta {
            bindings = <&kp LMETA>;
            key-positions = <13 22>;
            layers = <0 1 2 3 5 4>;
        };

        c_cpto {
            bindings = <&tog 4>;
            key-positions = <16 19>;
        };

        c_dol {
            bindings = <&kp DLLR>;
            key-positions = <36 28 27>;
        };

        c_bslh {
            bindings = <&kp BSLH>;
            key-positions = <36 27 14>;
        };

        c_pipe {
            bindings = <&kp PIPE>;
            key-positions = <36 4>;
        };

        c_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <36 14>;
        };

        c_at {
            bindings = <&kp AT>;
            key-positions = <13 20>;
            require-prior-idle-ms = <300>;
            layers = <0 1 2 3>;
        };

        c_us {
            bindings = <&kp LS(APOS)>;
            key-positions = <22 23>;
        };

        c_pgup {
            bindings = <&kp PAGE_UP>;
            key-positions = <30 31>;
            require-prior-idle-ms = <200>;
        };

        c_pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <31 32>;
            require-prior-idle-ms = <200>;
        };

        c_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 18>;
            require-prior-idle-ms = <400>;
            layers = <0 2>;
        };

        c_cut {
            bindings = <&kp LC(B)>;
            key-positions = <25 27>;
        };

        c_paste {
            bindings = <&kp LC(DOT)>;
            key-positions = <13 15>;
            require-prior-idle-ms = <200>;
        };

        c_copy {
            bindings = <&kp LC(I)>;
            key-positions = <3 1>;
        };

        c_esc {
            bindings = <&kp ESC>;
            key-positions = <12 13>;
            layers = <0>;
        };

        c_bt1L {
            bindings = <&m_bt1>;
            key-positions = <38 13>;
        };

        c_bt2L {
            bindings = <&m_bt2>;
            key-positions = <38 14>;
        };

        c_bt3L {
            bindings = <&m_bt3>;
            key-positions = <38 15>;
        };

        c_bt4L {
            bindings = <&m_bt4>;
            key-positions = <38 16>;
        };

        c_bt5L {
            bindings = <&m_bt5>;
            key-positions = <38 17>;
        };

        c_lhomeL {
            bindings = <&to 0>;
            key-positions = <37 13>;
        };

        c_lnumL {
            bindings = <&to 2>;
            key-positions = <37 14>;
        };

        c_lnavL {
            bindings = <&to 5>;
            key-positions = <37 16>;
        };

        c_lgamlok {
            bindings = <&tog 1>;
            key-positions = <37 36>;
            layers = <0 1>;
            require-prior-idle-ms = <3000>;
        };

        c_ltroub {
            bindings = <&to 7>;
            key-positions = <37 0>;
            require-prior-idle-ms = <3000>;
        };

        c_ltroubR {
            bindings = <&to 7>;
            key-positions = <40 11>;
            require-prior-idle-ms = <3000>;
        };

        cs_dwrk {
            bindings = <&ms_wrkD>;
            key-positions = <17 13 20 22>;
            layers = <5>;
            require-prior-idle-ms = <3000>;
            timeout-ms = <500>;
        };

        c_qwrk {
            bindings = <&ms_wrkQ>;
            key-positions = <20 22 26 13>;
            layers = <5>;
            require-prior-idle-ms = <3000>;
            timeout-ms = <500>;
        };

        cs_fox {
            bindings = <&ms_mac>;
            key-positions = <4 31 13 8>;
            layers = <5>;
        };

        c_laltcodesL {
            bindings = <&sl 6>;
            key-positions = <37 15>;
        };

        c_dskl {
            bindings = <&kp LG(LC(LEFT_ARROW))>;
            key-positions = <38 0 1>;
        };

        c_deskr {
            bindings = <&kp LG(LC(RIGHT_ARROW))>;
            key-positions = <38 4 5>;
        };

        c_laltcodesR {
            bindings = <&sl 6>;
            key-positions = <40 20>;
        };

        c_lhomeR {
            bindings = <&to 0>;
            key-positions = <40 22>;
        };

        c_lnumR {
            bindings = <&to 2>;
            key-positions = <40 21>;
        };

        c_lnavR {
            bindings = <&to 5>;
            key-positions = <19 40>;
        };

        c_bt1R {
            bindings = <&m_bt1>;
            key-positions = <39 22>;
        };

        c_bt2R {
            bindings = <&m_bt2>;
            key-positions = <39 21>;
        };

        c_bt3R {
            bindings = <&m_bt3>;
            key-positions = <39 20>;
        };

        c_bt4R {
            bindings = <&m_bt4>;
            key-positions = <19 39>;
        };

        c_bt5R {
            bindings = <&m_bt5>;
            key-positions = <18 39>;
        };

        c_plus {
            bindings = <&kp RBRC>;
            key-positions = <16 22 31>;
        };

        c_eq {
            bindings = <&kp RBKT>;
            key-positions = <26 15 16>;
        };

        c_pow {
            bindings = <&kp CARET>;
            key-positions = <4 14 32>;
        };

        c_mul {
            bindings = <&kp STAR>;
            key-positions = <31 16 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            bindings = <
&d_cvk          &db_q  &db_w  &db_e            &db_r        &db_t              &ht_R LS(Y) Y  &ht_R LS(U) U      &ht_R LS(I) I          &ht_R LS(O) O      &ht_R LS(P) P        &ht_R LS(LBKT) LBKT
&ht_xvk 0 HASH  &db_a  &db_s  &db_d            &db_f        &db_g              &ht_R LS(H) H  &ht_R RSHFT J      &ht_R RALT K           &ht_R RCTRL L      &ht_R RGUI SEMI      &ht_R LS(SQT) SQT
&kp AMPS        &db_z  &db_x  &db_c            &db_v        &db_b              &ht_R LS(N) N  &ht_R LS(M) M      &ht_R LS(COMMA) COMMA  &ht_R LS(DOT) DOT  &ht_R LS(FSLH) FSLH  &kp EXCL
                              &ht_l2k_L 0 TAB  &key_repeat  &ht_l1k_R 0 DEL    &kp RETURN     &ht_l1k_R 0 SPACE  &kp BSPC
            >;

            label = "orb|cptr";
        };

        home-gaming {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P     &kp LBKT
&trans  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "vidjo";
        };

        num-sys {
            bindings = <
&kp I     &kp CARET  &kp N7          &kp N8         &kp N9          &d_mindiv    &none   &kp C_RW      &kp C_STOP  &kp C_FF      &kp C_BRI_UP  &rgb_ug RGB_BRI
&none     &d_dotcom  &ht_L LCTRL N4  &ht_L LALT N5  &ht_L LSHFT N6  &d_plsatk    &none   &kp C_PREV    &kp C_PP    &kp C_NEXT    &kp C_BRI_DN  &rgb_ug RGB_BRD
&kp BSPC  &kp N0     &kp N1          &kp N2         &kp N3          &d_reteql    &none   &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp RALT      &rgb_ug RGB_TOG
                                     &to 0          &trans          &trans       &trans  &trans        &trans
            >;

            label = "num|sys";
        };

        numadjust {
            bindings = <
&trans  &trans    &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp STAR  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N0    &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "vidnum";
        };

        home-capsword {
            bindings = <
&d_cvk          &ht_L LS(Q) Q     &ht_L LS(W) W      &ht_L LS(E) E       &kp LS(R)    &kp LS(T)          &kp LS(Y)       &kp LS(U)          &kp LS(I)         &kp LS(O)          &kp LS(P)            &ht_R LS(LBKT) LBKT
&ht_xvk 0 HASH  &ht_L LGUI LS(A)  &ht_L LCTRL LS(S)  &ht_L LALT LS(D)    &kp LS(F)    &kp LS(G)          &kp LS(H)       &kp LS(J)          &ht_R RALT LS(K)  &ht_R RCTRL LS(L)  &ht_R RGUI LS(SEMI)  &kp SQT
&kp AMPS        &ht_L LS(Z) Z     &kp LS(X)          &kp LS(C)           &kp LS(V)    &kp LS(B)          &kp LS(N)       &kp LS(M)          &kp LS(LT)        &kp LS(GT)         &kp LS(QMARK)        &kp EXCL
                                                     &ht_l2tabto0_L 0 0  &key_repeat  &ht_l1k_R 0 DEL    &mp_2kto RET 0  &ht_l1spcto_R 0 0  &kp BSPC
            >;

            label = "ORB|CPTR";
        };

        nav-func {
            bindings = <
&kp BACKSPACE  &kp LC(LEFT_ARROW)      &kp UP     &kp LC(RIGHT_ARROW)      &kp LC(SLASH)  &kp LC(LS(SLASH))    &mt PSCRN LC(PSCRN)              &kp F9          &kp F10             &kp F11         &kp F12         &ext_power EP_TOG
&kp SPACE      &kp LEFT                &kp DOWN   &kp RIGHT                &kp LS(HOME)   &kp LS(END)          &mp_2key K_FORWARD C_AC_FORWARD  &ht_R RSHFT F5  &ht_R RIGHT_ALT F6  &ht_R RCTRL F7  &ht_R RMETA F8  &out OUT_BLE
&kp RET        &kp LC(LS(LEFT_ARROW))  &kp LA(E)  &kp LS(LC(RIGHT_ARROW))  &kp K_CMENU    &none                &mp_2key K_BACK C_AC_BACK        &kp F1          &kp F2              &kp F3          &kp F4          &out OUT_USB
                                                  &to 0                    &trans         &trans               &trans                           &trans          &trans
            >;

            label = "nav|func";
        };

        altcodes {
            bindings = <
&none  &mp_alt02 KP_N2 KP_N5  &mp_alt02 KP_N4 KP_N3  &mp_alt02 KP_N3 KP_N3  &none                  &mp_alt02 KP_N3 KP_N7    &none                  &none                  &mp_alt02 KP_N3 KP_N1  &none                  &mp_alt3 KP_N5 KP_N1   &none
&none  &mp_alt02 KP_N2 KP_N8  &mp_alt02 KP_N4 KP_N6  &mp_alt02 KP_N3 KP_N5  &mp_alt02 KP_N5 KP_N1  &mp_alt02 KP_N3 KP_N9    &mp_alt02 KP_N3 KP_N8  &mp_alt02 KP_N5 KP_N0  &mp_alt02 KP_N3 KP_N4  &mp_alt02 KP_N4 KP_N4  &mp_alt02 KP_N2 KP_N6  &none
&none  &mp_alt02 KP_N2 KP_N4  &mp_alt02 KP_N4 KP_N2  &mp_alt02 KP_N3 KP_N2  &none                  &mp_alt02 KP_N3 KP_N6    &none                  &none                  &none                  &none                  &none                  &none
                                                     &to 0                  &none                  &none                    &none                  &none                  &none
            >;

            label = "altcodes";
        };

        troubleshoot {
            bindings = <
&bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_CLR    &bt BT_CLR  &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1       &bt BT_SEL 0
&bt BT_DISC 0     &bt BT_DISC 1      &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none         &none       &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1      &bt BT_DISC 0
&ext_power EP_ON  &ext_power EP_OFF  &out OUT_BLE   &out OUT_USB   &bootloader    &sys_reset    &sys_reset  &bootloader    &out OUT_USB   &out OUT_BLE   &ext_power EP_OFF  &ext_power EP_ON
                                                    &to 0          &none          &none         &none       &none          &to 0
            >;

            label = "trouble";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        gamenum {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
