/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi { cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>; };

&led_strip { chain-length = <27>; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <190>;
};

&mt { flavor = "balanced"; };

&key_repeat { usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; };

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE SEMI COMMA DOT SLASH COLON>; };

/* Homerow mods

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(lt, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(lt, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(lt_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(lt_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(lt_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

*/

/ {
    behaviors {
        ht_L: ht_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <155>;
            quick-tap-ms = <135>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37>;
            hold-trigger-on-release;
        };

        d_gresc: d_gresc {
            compatible = "zmk,behavior-tap-dance";
            label = "D_GRESC";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;

            tapping-term-ms = <350>;
        };

        d_cmcl: d_cmcl {
            compatible = "zmk,behavior-tap-dance";
            label = "D_CMCL";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LS(W)>;

            tapping-term-ms = <275>;
        };

        d_pdcr: d_pdcr {
            compatible = "zmk,behavior-tap-dance";
            label = "D_PDCR";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LS(E)>;

            tapping-term-ms = <275>;
        };

        d_scco: d_scco {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SCCO";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp LS(Z)>;

            tapping-term-ms = <275>;
        };

        d_slqm: d_slqm {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SLQM";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LS(LEFT_BRACKET)>;

            tapping-term-ms = <275>;
        };

        ht_l1rr_L: ht_l1rr_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L1RR_L";
            bindings = <&m_mL1>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        ht_l1k_R: ht_l1k_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L1K_R";
            bindings = <&m_mL1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 37 40>;
            hold-trigger-on-release;
        };

        ht_l2k_L: ht_l2k_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L2K_L";
            bindings = <&m_mL2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39 37>;
            hold-trigger-on-release;
        };

        ht_xvk: ht_xvk {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_XVK";
            bindings = <&m_xv>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <180>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
        };

        ht_cvk: ht_cvk {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CVK";
            bindings = <&m_cv>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <180>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <170>;
            flavor = "balanced";
        };

        d_cvk: d_cvk {
            compatible = "zmk,behavior-tap-dance";
            label = "D_CVK";
            #binding-cells = <0>;
            bindings = <&ht_cvk 0 GRAVE>, <&kp TILDE>;

            tapping-term-ms = <225>;
        };

        ht_R: ht_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <155>;
            quick-tap-ms = <135>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37>;
            hold-trigger-on-release;
        };

        d_plsatk: d_plsatk {
            compatible = "zmk,behavior-tap-dance";
            label = "D_PLSATK";
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp STAR>;

            tapping-term-ms = <300>;
        };

        d_mindiv: d_mindiv {
            compatible = "zmk,behavior-tap-dance";
            label = "D_MINDIV";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp LBKT>;

            tapping-term-ms = <350>;
        };

        d_dotcom: d_dotcom {
            compatible = "zmk,behavior-tap-dance";
            label = "D_DOTCOM";
            #binding-cells = <0>;
            bindings = <&ht_L LGUI E>, <&kp W>;

            tapping-term-ms = <275>;
        };

        d_reteql: d_reteql {
            compatible = "zmk,behavior-tap-dance";
            label = "D_RETEQL";
            #binding-cells = <0>;
            tapping-term-ms = <275>;
            bindings = <&kp RET>, <&kp RBKT>;
        };

        ht_l1spcto_R: ht_l1spcto_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L1SPCTO_R";
            bindings = <&m_mL1>, <&m_2spcto>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <155>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ht_l2tabto0_L: ht_l2tabto0_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_L2TABTO0_L";
            bindings = <&m_mL2>, <&m_2tabto0>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <155>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        d_mnul: d_mnul {
            compatible = "zmk,behavior-tap-dance";
            label = "D_MNUL";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        d_sqdq: d_sqdq {
            compatible = "zmk,behavior-tap-dance";
            label = "D_SQDQ";
            #binding-cells = <0>;
            tapping-term-ms = <275>;
            bindings = <&kp Q>, <&kp LS(Q)>;
        };

        d_ampms: d_ampms {
            compatible = "zmk,behavior-tap-dance";
            label = "D_AMPMS";
            #binding-cells = <0>;
            bindings = <&m_am>, <&m_pm>;
        };

        d_andins: d_andins {
            compatible = "zmk,behavior-tap-dance";
            label = "D_ANDINS";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp INS>;

            tapping-term-ms = <350>;
        };

        d_revplsatk: d_revplsatk {
            compatible = "zmk,behavior-tap-dance";
            label = "D_REVPLSATK";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp ASTRK>;

            tapping-term-ms = <300>;
        };

        d_revmindiv: d_revmindiv {
            compatible = "zmk,behavior-tap-dance";
            label = "D_REVMINDIV";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp SLASH>;

            tapping-term-ms = <350>;
        };

        d_revreteq: d_revreteq {
            compatible = "zmk,behavior-tap-dance";
            label = "D_REVRETEQ";
            #binding-cells = <0>;
            tapping-term-ms = <275>;
            bindings = <&kp RET>, <&kp EQUAL>;
        };

        d_revsqdq: d_revsqdq {
            compatible = "zmk,behavior-tap-dance";
            label = "D_REVSQDQ";
            #binding-cells = <0>;
            tapping-term-ms = <275>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        ht_capwspc: ht_capwspc {
            compatible = "zmk,behavior-mod-morph";
            label = "HT_CAPWSPC";
            bindings = <&ht_l1spcto_R 0 0>, <&ht_l1k_R 0 SPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_cawpret: ht_cawpret {
            compatible = "zmk,behavior-mod-morph";
            label = "HT_CAWPRET";
            bindings = <&m_2kpretto>, <&kp RET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_capwtab: ht_capwtab {
            compatible = "zmk,behavior-mod-morph";
            label = "HT_CAPWTAB";
            bindings = <&m_2tabto0>, <&ht_l2k_L 0 TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        d_revdotcom: d_revdotcom {
            compatible = "zmk,behavior-tap-dance";
            label = "D_REVDOTCOM";
            #binding-cells = <0>;
            bindings = <&ht_L LGUI PERIOD>, <&kp COMMA>;

            tapping-term-ms = <275>;
        };
    };

    macros {
        ms_wrkD: ms_wrkD {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &lshft &kp K &kp G &kp I &kp V &kp D &kp O &lshft &kp N9 &kp Y &kp O &kp T &kp D &kp O &kp N7 &kp G &kp L &kp H &kp G &kp A &kp N9 &kp SEMI &kp K &kp A &kp V &kp D &kp SEMI>;
            label = "MS_WRKD";
            tap-ms = <30>;
        };

        ms_wrkQ: ms_wrkQ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp LS(T) &kp LS(I) &kp LS(C) &kp LS(K) &kp LS(E) &kp LS(R) &kp N9 &kp F &kp R &kp Y &kp E &kp R &kp N7 &kp I &kp N &kp D &kp I &kp A &kp N9 &kp S &kp T &kp A &kp K &kp E &kp S>;
            label = "MS_WRKQ";
            tap-ms = <60>;
        };

        ms_mac: ms_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMI &kp J &kp D &kp D &kp L &kp N6 &kp COLON &kp LT &kp LS(D) &kp LS(O) &kp GT &kp LS(D) &kp N9 &kp SEMI &kp K &kp O &kp A &kp L &kp U &kp D &kp O &kp N6 &kp C &kp G &kp L &kp B>;
            label = "MS_MAC";
            tap-ms = <60>;
        };

        m_mL1: m_mL1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 4>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>,
                <&macro_press>;

            label = "M_ML1";
            wait-ms = <10>;
            tap-ms = <20>;
        };

        m_mL2: m_mL2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 7>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 7>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>;

            label = "M_ML2";
            wait-ms = <10>;
            tap-ms = <20>;
        };

        m_bt1: m_bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &rgb_ug RGB_COLOR_HSB(0,100,12)>;
            label = "M_BT1";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt2: m_bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &rgb_ug RGB_COLOR_HSB(120,100,12)>;
            label = "M_BT2";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt3: m_bt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &rgb_ug RGB_COLOR_HSB(20,100,12)>;
            label = "M_BT3";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt4: m_bt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &rgb_ug RGB_COLOR_HSB(213,100,12)>;
            label = "M_BT4";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        m_bt5: m_bt5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &rgb_ug RGB_COLOR_HSB(300,100,12)>;
            label = "M_BT5";
            tap-ms = <200>;
            wait-ms = <200>;
        };

        ms_and: ms_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp H &kp SPACE>;
            label = "MS_AND";
        };

        mp_hmL: mp_hmL {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "MP_HML";
        };

        m_2cmd: m_2cmd {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "M_2CMD";
        };

        m_xv: m_xv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(B) &rgb_ug RGB_SAD &rgb_ug RGB_SAD>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(DOT) &rgb_ug RGB_SAI &rgb_ug RGB_SAI>;

            label = "M_XV";
        };

        m_cv: m_cv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(I) &rgb_ug RGB_BRI &rgb_ug RGB_BRI>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(DOT) &rgb_ug RGB_BRD &rgb_ug RGB_BRD>;

            label = "M_CV";
        };

        mp_2key: mp_2key {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "MP_2KEY";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        mp_alt02: mp_alt02 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N2 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LALT>;

            label = "MP_ALT02";
        };

        mp_alt3: mp_alt3 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LALT>;

            label = "MP_ALT3";
        };

        mp_2kto: mp_2kto {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;

            label = "MP_2KTO";
        };

        m_2spcto: m_2spcto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp SPACE &m_capsunlok>;

            label = "M_2SPCTO";
        };

        m_2tabto0: m_2tabto0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp TAB &to 0>;

            label = "M_2TABTO0";
        };

        m_alt01: m_alt01 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LALT>;

            label = "M_ALT01";
        };

        m_am: m_am {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp M>;
            label = "M_AM";
        };

        m_pm: m_pm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp M>;
            label = "M_PM";
        };

        m_retup: m_retup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(RET) &kp UP>;
            label = "M_RETUP";
        };

        ms_phnx: ms_rphe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp FSLH &kp D &kp V &kp G &kp D &kp P &kp N7 &kp R &kp S &kp P &kp A &kp O &kp G &kp K &kp T &kp N4 &kp LS(U) &kp LS(A) &kp LS(M) &kp LS(M) &kp LS(D) &kp LS(O) &kp N4 &kp N &kp G &kp S &kp K &kp A>;
            label = "MS_RPHE";
            tap-ms = <60>;
        };

        m_2xesc: m_2xesc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &kp ESC>;
            label = "M_2XESC";
            tap-ms = <50>;
        };

        m_capslok: m_capslok {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3>, <&macro_tap>, <&ext_power EP_OFF>;

            label = "M_CAPSLOK";
            wait-ms = <15>;
            tap-ms = <30>;
        };

        m_capsunlok: m_capsunlok {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_tap>, <&ext_power EP_ON>;

            label = "M_CAPSUNLOK";
            wait-ms = <15>;
            tap-ms = <30>;
        };

        m_revlok: m_revlok {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &rgb_ug RGB_BRI>;
            label = "M_REVLOK";
            wait-ms = <5>;
            tap-ms = <15>;
        };

        m_revunlok: m_revunlok {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &rgb_ug RGB_BRD>;
            label = "M_REVUNLOK";
            wait-ms = <5>;
            tap-ms = <15>;
        };

        m_2kpretto: m_2kpretto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RET &m_capsunlok>;

            label = "M_2KPRETTO";
        };

        xm_mL1: xm_mL1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 4>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>;

            label = "XM_ML1";
            wait-ms = <10>;
            tap-ms = <20>;
        };

        xm_mL2: xm_mL2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 7>,
                <&macro_tap>,
                <&rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI &rgb_ug RGB_HUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 7>,
                <&macro_tap>,
                <&rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD &rgb_ug RGB_HUD>;

            label = "XM_ML2";
            wait-ms = <10>;
            tap-ms = <20>;
        };
    };

    combos {
        compatible = "zmk,combos";

        c_parL {
            bindings = <&kp LPAR>;
            key-positions = <1 2>;
        };

        c_parR {
            bindings = <&kp RPAR>;
            key-positions = <3 4>;
        };

        c_bktL {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        c_bktR {
            bindings = <&kp EQUAL>;
            key-positions = <10 9>;
        };

        c_home {
            bindings = <&kp HOME>;
            key-positions = <15 16>;
        };

        c_end {
            bindings = <&kp END>;
            key-positions = <16 17>;
            require-prior-idle-ms = <200>;
        };

        c_meta {
            bindings = <&kp LMETA>;
            key-positions = <13 22>;
            layers = <0 2 4 6 7 4>;
            require-prior-idle-ms = <200>;
            timeout-ms = <28>;
        };

        c_capswrdlok {
            bindings = <&m_capslok>;
            key-positions = <16 19>;
            layers = <0 1>;
        };

        c_dol {
            bindings = <&kp DLLR>;
            key-positions = <28 37 29>;
        };

        c_bslh {
            bindings = <&kp BSLH>;
            key-positions = <37 28 15>;
        };

        c_pipe {
            bindings = <&kp PIPE>;
            key-positions = <37 5 17>;
        };

        c_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <4 15 9>;
        };

        c_at {
            bindings = <&kp AT>;
            key-positions = <13 20>;
            require-prior-idle-ms = <300>;
            layers = <0 2 4 6>;
        };

        c_us {
            bindings = <&kp LS(APOS)>;
            key-positions = <22 23>;
        };

        c_pgup {
            bindings = <&kp PAGE_UP>;
            key-positions = <30 31>;
            require-prior-idle-ms = <200>;
        };

        c_pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <31 32>;
            require-prior-idle-ms = <200>;
        };

        c_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 18>;
            require-prior-idle-ms = <400>;
            layers = <0 4>;
        };

        c_cut {
            bindings = <&kp LC(B)>;
            key-positions = <25 27>;
        };

        c_paste {
            bindings = <&kp LC(DOT)>;
            key-positions = <16 14>;
            require-prior-idle-ms = <350>;
            timeout-ms = <30>;
        };

        c_copy {
            bindings = <&kp LC(I)>;
            key-positions = <13 15>;
            timeout-ms = <21>;
            require-prior-idle-ms = <350>;
        };

        c_esc {
            bindings = <&kp ESC>;
            key-positions = <13 14>;
        };

        c_bt1L {
            bindings = <&m_bt1>;
            key-positions = <38 13>;
        };

        c_bt2L {
            bindings = <&m_bt2>;
            key-positions = <38 14>;
        };

        c_bt3L {
            bindings = <&m_bt3>;
            key-positions = <38 15>;
        };

        c_bt4L {
            bindings = <&m_bt4>;
            key-positions = <38 16>;
        };

        c_bt5L {
            bindings = <&m_bt5>;
            key-positions = <38 17>;
        };

        c_lhomeL {
            bindings = <&to 0>;
            key-positions = <13 36>;
        };

        c_lnumL {
            bindings = <&to 4>;
            key-positions = <14 36>;
        };

        c_lnavL {
            bindings = <&to 7>;
            key-positions = <16 36>;
        };

        c_lgamlok {
            bindings = <&tog 2>;
            key-positions = <41 40>;
            layers = <0 2>;
            require-prior-idle-ms = <1000>;
        };

        c_ltroub {
            bindings = <&to 9>;
            key-positions = <0 36 28>;
            require-prior-idle-ms = <3000>;
        };

        c_ltroubR {
            bindings = <&to 9>;
            key-positions = <11 31 41>;
            require-prior-idle-ms = <3000>;
        };

        cs_dwrk {
            bindings = <&ms_wrkD>;
            key-positions = <17 13 20 22>;
            require-prior-idle-ms = <3000>;
            timeout-ms = <100>;
        };

        c_qwrk {
            bindings = <&ms_wrkQ>;
            key-positions = <20 22 26 13>;
            require-prior-idle-ms = <3000>;
            timeout-ms = <100>;
        };

        cs_fox {
            bindings = <&ms_mac>;
            key-positions = <4 31 13 8>;
            timeout-ms = <100>;
            require-prior-idle-ms = <3000>;
        };

        c_laltcodesL {
            bindings = <&sl 8>;
            key-positions = <15 36>;
        };

        c_dskl {
            bindings = <&kp LG(LC(LEFT_ARROW))>;
            key-positions = <0 1 37>;
        };

        c_deskr {
            bindings = <&kp LG(LC(RIGHT_ARROW))>;
            key-positions = <4 5 37>;
        };

        c_laltcodesR {
            bindings = <&sl 8>;
            key-positions = <20 41>;
        };

        c_lhomeR {
            bindings = <&to 0>;
            key-positions = <22 41>;
        };

        c_lnumR {
            bindings = <&to 4>;
            key-positions = <21 41>;
        };

        c_lnavR {
            bindings = <&to 7>;
            key-positions = <19 41>;
        };

        c_bt1R {
            bindings = <&m_bt1>;
            key-positions = <39 22>;
        };

        c_bt2R {
            bindings = <&m_bt2>;
            key-positions = <39 21>;
        };

        c_bt3R {
            bindings = <&m_bt3>;
            key-positions = <39 20>;
        };

        c_bt4R {
            bindings = <&m_bt4>;
            key-positions = <19 39>;
        };

        c_bt5R {
            bindings = <&m_bt5>;
            key-positions = <18 39>;
        };

        c_sum {
            bindings = <&kp RBRC>;
            key-positions = <16 22 31>;
        };

        c_eq {
            bindings = <&kp RBKT>;
            key-positions = <26 15 16>;
        };

        c_pow {
            bindings = <&kp CARET>;
            key-positions = <4 14 32>;
        };

        c_ast {
            bindings = <&kp STAR>;
            key-positions = <13 22 20>;
        };

        c_slsh {
            bindings = <&d_slqm>;
            key-positions = <0 37>;
        };

        c_qp {
            bindings = <&kp P>;
            key-positions = <1 37>;
        };

        c_wo {
            bindings = <&kp O>;
            key-positions = <2 37>;
        };

        c_ei {
            bindings = <&kp I>;
            key-positions = <3 37>;
        };

        c_ru {
            bindings = <&kp U>;
            key-positions = <4 37>;
        };

        c_ty {
            bindings = <&kp Y>;
            key-positions = <5 37>;
        };

        c_min {
            bindings = <&kp SQT>;
            key-positions = <12 37>;
        };

        c_asemi {
            bindings = <&kp SEMI>;
            key-positions = <13 37>;
        };

        c_sl {
            bindings = <&kp L>;
            key-positions = <14 37>;
        };

        c_dk {
            bindings = <&kp K>;
            key-positions = <15 37>;
        };

        c_fj {
            bindings = <&kp J>;
            key-positions = <16 37>;
        };

        c_hg {
            bindings = <&kp H>;
            key-positions = <17 37>;
        };

        c_excl {
            bindings = <&kp EXCL>;
            key-positions = <24 37>;
        };

        c_zslsh {
            bindings = <&kp FSLH>;
            key-positions = <25 37>;
        };

        c_xdot {
            bindings = <&kp DOT>;
            key-positions = <26 37>;
        };

        c_ccom {
            bindings = <&kp COMMA>;
            key-positions = <27 37>;
        };

        c_vm {
            bindings = <&kp M>;
            key-positions = <28 37>;
        };

        c_bn {
            bindings = <&kp N>;
            key-positions = <29 37>;
        };

        c_space {
            bindings = <&kp SPACE>;
            key-positions = <27 28>;
        };

        c_btx1 {
            bindings = <&bt BT_DISC 0>;
            key-positions = <38 25>;
        };

        c_btx2 {
            bindings = <&bt BT_DISC 1>;
            key-positions = <38 26>;
        };

        c_btx3 {
            bindings = <&bt BT_DISC 2>;
            key-positions = <38 27>;
        };

        c_btx4 {
            bindings = <&bt BT_DISC 3>;
            key-positions = <38 28>;
        };

        c_btx5 {
            bindings = <&bt BT_DISC 4>;
            key-positions = <38 29>;
        };

        c_bksp {
            bindings = <&kp BSPC>;
            key-positions = <26 25>;
        };

        c_ins {
            bindings = <&kp INSERT>;
            key-positions = <33 34>;
        };

        c_undo {
            bindings = <&kp LC(FSLH)>;
            key-positions = <18 19>;
        };

        c_redo {
            bindings = <&kp RC(RS(FSLH))>;
            key-positions = <19 20>;
            timeout-ms = <28>;
            require-prior-idle-ms = <350>;
        };

        c_redoalt {
            bindings = <&kp RC(T)>;
            key-positions = <20 18>;
        };

        c_ret {
            bindings = <&kp RET>;
            key-positions = <29 28>;
        };

        c_deskwinL {
            bindings = <&kp LG(LC(LS(LEFT_ARROW)))>;
            key-positions = <0 37 2 1>;
        };

        c_deskwinR {
            bindings = <&kp LG(LC(LS(RIGHT_ARROW)))>;
            key-positions = <4 5 37 3>;
        };

        cs_phx {
            bindings = <&ms_phnx>;
            key-positions = <19 4 29 21>;
            require-prior-idle-ms = <3000>;
            timeout-ms = <100>;
        };

        c_revlok {
            bindings = <&m_revlok>;
            key-positions = <37 36>;
            layers = <0>;
            require-prior-idle-ms = <1000>;
        };

        c_revunlok {
            bindings = <&m_revunlok>;
            key-positions = <37 36>;
            require-prior-idle-ms = <1000>;
            layers = <1>;
        };

        c_capswrdunlok {
            bindings = <&m_capsunlok>;
            key-positions = <16 19>;
            layers = <3>;
        };

        c_glowstep {
            bindings = <&rgb_ug RGB_EFF>;
            key-positions = <7 10 32 14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            bindings = <
&d_cvk          &d_sqdq       &d_cmcl        &d_pdcr          &kp R            &kp T          &kp Y       &kp U              &kp I         &kp O          &kp P            &d_slqm
&ht_xvk 0 HASH  &ht_L LGUI A  &ht_L LCTRL S  &ht_L LALT D     &ht_L LSHFT F    &kp G          &kp H       &ht_R RSHFT J      &ht_R RALT K  &ht_R RCTRL L  &ht_R RGUI SEMI  &kp SQT
&d_andins       &d_scco       &kp X          &kp C            &kp V            &kp B          &kp N       &kp M              &kp COMMA     &kp PERIOD     &kp FSLH         &kp EXCL
                                             &ht_l1k_R 0 DEL  &ht_l2k_L 0 TAB  &key_repeat    &kp RETURN  &ht_l1k_R 0 SPACE  &kp BSPC
            >;

            label = "orb|cptr";
        };

        home-revit {
            label = "revit";
            bindings = <
&ht_cvk 0 GRAVE  &kp Q         &kp W          &kp E            &kp R            &kp T          &kp Y       &kp U              &kp I         &kp O          &kp P            &d_slqm
&ht_xvk 0 HASH   &ht_L LGUI A  &ht_L LCTRL S  &ht_L LALT D     &ht_L LSHFT F    &kp G          &kp H       &ht_R RSHFT J      &ht_R RALT K  &ht_R RCTRL L  &ht_R RGUI SEMI  &kp SQT
&m_2xesc         &kp Z         &kp X          &kp C            &kp V            &kp B          &kp N       &kp M              &kp COMMA     &kp PERIOD     &kp FSLH         &kp EXCL
                                              &ht_l1k_R 0 DEL  &ht_l2k_L 0 TAB  &key_repeat    &kp RETURN  &ht_l1k_R 0 SPACE  &kp BSPC
            >;
        };

        home-gaming {
            bindings = <
&kp EQUAL  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P     &kp LBKT
&kp SQT    &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp MINUS  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp EXCL
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "vidjo";
        };

        home-capsword {
            bindings = <
&d_cvk          &d_sqdq           &d_cmcl            &d_pdcr           &kp LS(R)          &kp LS(T)      &kp LS(Y)    &kp LS(U)          &kp LS(I)         &kp LS(O)          &kp LS(P)            &d_slqm
&ht_xvk 0 HASH  &ht_L LGUI LS(A)  &ht_L LCTRL LS(S)  &ht_L LALT LS(D)  &ht_L LSHFT LS(F)  &kp LS(G)      &kp LS(H)    &ht_R RSHFT RS(J)  &ht_R RALT LS(K)  &ht_R RCTRL LS(L)  &ht_R RGUI LS(SEMI)  &kp SQT
&d_andins       &d_scco           &kp LS(X)          &kp LS(C)         &kp LS(V)          &kp LS(B)      &kp LS(N)    &kp LS(M)          &kp LS(LT)        &kp LS(GT)         &kp LS(QMARK)        &kp EXCL
                                                     &ht_l1k_R 0 DEL   &ht_capwtab        &key_repeat    &ht_cawpret  &ht_capwspc        &kp BSPC
            >;

            label = "ORB|CPTR";
        };

        num-sys {
            bindings = <
&kp LCTRL  &d_sqdq    &kp N7          &kp N8         &kp N9          &d_mindiv    &none      &kp C_RW            &kp C_STOP       &kp C_FF            &kp C_BRI_UP          &rgb_ug RGB_BRI
&kp PRCNT  &d_dotcom  &ht_L LCTRL N4  &ht_L LALT N5  &ht_L LSHFT N6  &d_plsatk    &kp LS(Z)  &ht_R RSHFT C_PREV  &ht_R RALT C_PP  &ht_R RCTRL C_NEXT  &ht_R RMETA C_BRI_DN  &rgb_ug RGB_BRD
&none      &kp N0     &kp N1          &kp N2         &kp N3          &d_reteql    &d_ampms   &kp C_VOL_DN        &kp C_MUTE       &kp C_VOL_UP        &ext_power EP_ON      &rgb_ug RGB_ON
                                      &to 0          &trans          &trans       &trans     &trans              &trans
            >;

            label = "num|sys";
        };

        num-revit {
            label = "num|rev";
            bindings = <
&none      &d_revsqdq    &kp N7          &kp N8         &kp N9          &d_revmindiv    &none      &kp C_RW            &kp C_STOP       &kp C_FF            &kp C_BRI_UP          &rgb_ug RGB_BRI
&kp PRCNT  &d_revdotcom  &ht_L LCTRL N4  &ht_L LALT N5  &ht_L LSHFT N6  &d_revplsatk    &kp LS(Z)  &ht_R RSHFT C_PREV  &ht_R RALT C_PP  &ht_R RCTRL C_NEXT  &ht_R RMETA C_BRI_DN  &rgb_ug RGB_BRD
&none      &kp N0        &kp N1          &kp N2         &kp N3          &d_revreteq     &none      &kp C_VOL_DN        &kp C_MUTE       &kp C_VOL_UP        &ext_power EP_ON      &rgb_ug RGB_ON
                                         &to 0          &trans          &trans          &trans     &trans              &trans
            >;
        };

        numadjust {
            bindings = <
&none  &none    &kp N7  &kp N8  &kp N9  &kp MINUS    &none  &none  &none  &none  &none  &none
&none  &kp DOT  &kp N4  &kp N5  &kp N6  &kp PLUS     &none  &none  &none  &none  &none  &none
&none  &kp N0   &kp N1  &kp N2  &kp N3  &kp EQUAL    &none  &none  &none  &none  &none  &none
                        &none   &none   &none        &none  &none  &none
            >;

            label = "vidnum";
        };

        nav-func {
            bindings = <
&none          &kp LC(LEFT_ARROW)      &kp UP     &kp LC(RIGHT_ARROW)      &kp LC(SLASH)         &kp LC(LS(SLASH))    &mt PSCRN LC(PSCRN)              &kp F9          &kp F10             &kp F11         &kp F12         &out OUT_BLE
&m_retup       &kp LEFT                &kp DOWN   &kp RIGHT                &ht_L LSHFT LS(HOME)  &kp LS(END)          &mp_2key K_FORWARD C_AC_FORWARD  &ht_R RSHFT F5  &ht_R RIGHT_ALT F6  &ht_R RCTRL F7  &ht_R RMETA F8  &out OUT_USB
&kp LC(COMMA)  &kp LC(LS(LEFT_ARROW))  &kp LA(E)  &kp LS(LC(RIGHT_ARROW))  &kp K_CMENU           &kp INS              &mp_2key K_BACK C_AC_BACK        &kp F1          &kp F2              &kp F3          &kp F4          &none
                                                  &to 0                    &trans                &trans               &trans                           &trans          &trans
            >;

            label = "nav|func";
        };

        altcodes {
            bindings = <
&none  &mp_alt02 KP_N2 KP_N5  &mp_alt02 KP_N4 KP_N3  &mp_alt02 KP_N3 KP_N3  &none                  &mp_alt02 KP_N3 KP_N7    &none                  &none                  &mp_alt02 KP_N3 KP_N1  &none                  &mp_alt3 KP_N5 KP_N1   &none
&none  &mp_alt02 KP_N2 KP_N8  &mp_alt02 KP_N4 KP_N6  &mp_alt02 KP_N3 KP_N5  &mp_alt02 KP_N5 KP_N1  &mp_alt02 KP_N3 KP_N9    &mp_alt02 KP_N3 KP_N8  &mp_alt02 KP_N5 KP_N0  &mp_alt02 KP_N3 KP_N4  &mp_alt02 KP_N4 KP_N4  &mp_alt02 KP_N2 KP_N6  &m_alt01 KP_N5 KP_N1
&none  &mp_alt02 KP_N2 KP_N4  &mp_alt02 KP_N4 KP_N2  &mp_alt02 KP_N3 KP_N2  &none                  &mp_alt02 KP_N3 KP_N6    &none                  &none                  &none                  &none                  &none                  &none
                                                     &to 0                  &none                  &none                    &none                  &none                  &none
            >;

            label = "altcodes";
        };

        troubleshoot {
            bindings = <
&bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_CLR        &bt BT_CLR      &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1       &bt BT_SEL 0
&bt BT_DISC 0     &bt BT_DISC 1      &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &studio_unlock    &studio_unlock  &bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1      &bt BT_DISC 0
&ext_power EP_ON  &ext_power EP_OFF  &out OUT_BLE   &out OUT_USB   &bootloader    &sys_reset        &sys_reset      &bootloader    &out OUT_USB   &out OUT_BLE   &ext_power EP_OFF  &ext_power EP_ON
                                                    &to 0          &none          &none             &none           &none          &to 0
            >;

            label = "trouble";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        gamenum {
            if-layers = <2 4>;
            then-layer = <6>;
        };

        revnum {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
