/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi {
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>;
};

&led_strip {
    chain-length = <27>;
};

&lt {
    flavor = "balanced";
};

&mt {
    flavor = "balanced";
};

&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};

&caps_word {
    continue-list = <UNDERSCORE>;
};

/* Homerow mods

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(lt, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(lt, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(lt_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(lt_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(lt_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

*/

/ {
    behaviors {
        HT_CAP: HT_CAP {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CAP";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <125>;
        };

        DAN_CAP: DAN_CAP {
            compatible = "zmk,behavior-tap-dance";
            label = "DAN_CAP";
            #binding-cells = <0>;
            bindings = <&HT_CAP LSHIFT 0>, <&kp CAPS>;

            tapping-term-ms = <125>;
        };

        HT_LNUM: HT_LNUM {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LNUM";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        DAN_L1_L2: DAN_L1_L2 {
            compatible = "zmk,behavior-tap-dance";
            label = "DAN_L1_L2";
            #binding-cells = <0>;
            bindings = <&LHXLT_L 1 1>, <&LHXLT_L 2 2>;

            tapping-term-ms = <200>;
        };

        M_F1_F13: M_F1_F13 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F1_F13";
            bindings = <&kp F1>, <&kp F13>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F2_F14: M_F2_F14 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F2_F14";
            bindings = <&kp F2>, <&kp F14>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F3_F15: M_F3_F15 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F3_F15";
            bindings = <&kp F3>, <&kp F15>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F4_F16: M_F4_F16 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F4_F16";
            bindings = <&kp F4>, <&kp F16>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F5_F17: M_F5_F17 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F5_F17";
            bindings = <&kp F5>, <&kp F17>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F6_F18: M_F6_F18 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F6_F18";
            bindings = <&kp F6>, <&kp F18>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F7_F19: M_F7_F19 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F7_F19";
            bindings = <&kp F7>, <&kp F19>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F8_F20: M_F8_F20 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F8_F20";
            bindings = <&kp F8>, <&kp F20>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F9_F21: M_F9_F21 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F9_F21";
            bindings = <&kp F9>, <&kp F21>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F10_F22: M_F10_F22 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F10_F22";
            bindings = <&kp F10>, <&kp F22>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F11_F23: M_F11_F23 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F11_F23";
            bindings = <&kp F11>, <&kp F23>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        M_F12_F24: M_F12_F24 {
            compatible = "zmk,behavior-mod-morph";
            label = "M_F12_F24";
            bindings = <&kp F12>, <&kp F24>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        LXT_L: LXT_L {
            compatible = "zmk,behavior-hold-tap";
            label = "LXT_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        LXT_R: LXT_R {
            compatible = "zmk,behavior-hold-tap";
            label = "LXT_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        HXT_R: HXT_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HXT_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        HXT_L: HXT_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HXT_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        LHXLT_L: LHXLT_L {
            compatible = "zmk,behavior-hold-tap";
            label = "LHXLT_L";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        LHXLT_R: LHXLT_R {
            compatible = "zmk,behavior-hold-tap";
            label = "LHXLT_R";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        HT_RPT: HT_RPT {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_RPT";
            bindings = <&key_repeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        M_BKSP_DEL: M_BKSP_DEL {
            compatible = "zmk,behavior-mod-morph";
            label = "M_BKSP_DEL";
            bindings = <&kp BSPC>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        MLm1: MLm1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &rgb_ug RGB_COLOR_HSB(50,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &rgb_ug RGB_COLOR_HSB(0,100,50)>;

            label = "layer";
        };

        MLm2: MLm2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 2 &rgb_ug RGB_COLOR_HSB(122,100,50)>;
            label = "MLM2";
        };

        MLm3: MLm3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 3 &rgb_ug RGB_COLOR_HSB(272,100,50)>;
            label = "MLM3";
        };

        MLt1: MLt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &rgb_ug RGB_COLOR_HSB(50,100,50)>;
            label = "MLT1";
        };

        MLt2: MLt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 2 &rgb_ug RGB_COLOR_HSB(122,100,50)>;
            label = "MLT2";
        };

        MLt3: MLt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 3 &rgb_ug RGB_COLOR_HSB(272,100,50)>;
            label = "MLT3";
        };

        MLm0: MLm0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 0 &rgb_ug RGB_COLOR_HSB(360,100,50)>;
            label = "MLM0";
        };

        MLt0: MLt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 0 &rgb_ug RGB_COLOR_HSB(360,100,50)>;
            label = "MLT0";
        };
    };

    combos {
        compatible = "zmk,combos";

        reset {
            bindings = <&sys_reset>;
            key-positions = <4 15 26 7 20 33>;
            timeout-ms = <50>;
            slow-release;
            layers = <3>;
            require-prior-idle-ms = <3000>;
        };

        parenOpen {
            bindings = <&kp LPAR>;
            key-positions = <1 2>;
            layers = <0>;
        };

        parenClose {
            bindings = <&kp RPAR>;
            key-positions = <3 4>;
            layers = <0>;
        };

        brackOpen {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        brackClose {
            bindings = <&kp EQUAL>;
            key-positions = <10 9>;
            layers = <0>;
        };

        braceOpen {
            bindings = <&kp UNDER>;
            key-positions = <4 5>;
            layers = <0>;
        };

        braceClose {
            bindings = <&kp PLUS>;
            key-positions = <6 7>;
            layers = <0>;
        };

        lShift {
            bindings = <&kp LSHIFT>;
            key-positions = <13 14>;
        };

        rShift {
            bindings = <&kp RSHIFT>;
            key-positions = <21 22>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <15 16>;
            layers = <0>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <16 17>;
            layers = <0>;
        };

        btReset {
            bindings = <&bt BT_CLR>;
            key-positions = <39 40 41>;
            timeout-ms = <50>;
            slow-release;
            layers = <3>;
        };

        mirBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <15 16>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            bindings = <
&kp GRAVE      &kp Q           &kp W          &kp E          &kp R            &kp T       &kp Y                           &kp U            &kp I              &kp O                    &kp P               &kp LBKT
&kp TAB        &LXT_L 1 A      &LXT_L 2 S     &LXT_L 3 D     &kp F            &kp G       &kp H                           &kp J            &LXT_R 3 K         &LXT_R 2 L               &LXT_R 1 SEMI       &kp SQT
&kp AMPERSAND  &HXT_L LCTRL Z  &HXT_L LALT X  &HXT_L LGUI C  &HXT_L LSHIFT V  &kp B       &kp N                           &HXT_R RSHIFT M  &HXT_R RGUI COMMA  &HXT_R RIGHT_ALT PERIOD  &HXT_R RCTRL SLASH  &kp EXCL
                                              &LXT_L 3 ESC   &DAN_L1_L2       &DAN_CAP    &HXT_R RA(RC(RG(RSHFT))) ENTER  &kp SPACE        &M_BKSP_DEL
            >;
        };

        num-sym {
            bindings = <
&kp LBKT      &kp APOS         &kp N7          &kp N8          &kp N9            &kp E                &kp AT  &kp HASH            &kp DOLLAR         &kp PERCENT        &kp CARET           &kp BACKSLASH
&kp ASTERISK  &kp RBRC         &kp N4          &kp N5          &kp N6            &kp RIGHT_BRACKET    &trans  &kp LPAR            &kp RPAR           &kp UNDERSCORE     &kp PLUS            &kp PIPE
&key_repeat   &HXT_L LCTRL N0  &HXT_L LALT N1  &HXT_L LGUI N2  &HXT_R LSHIFT N3  &kp ENTER            &MLm1   &HXT_R RSHFT MINUS  &HXT_R RGUI EQUAL  &HXT_R RALT LS(W)  &HXT_R RCTRL LS(E)  &key_repeat
                                               &to 0           &trans            &trans               &trans  &trans              &trans
            >;
        };

        arrow-ctrl {
            bindings = <
&kp C_AC_UNDO  &kp RC(RS(SLASH))      &kp UP             &kp K_MENU             &kp K_CONTEXT_MENU   &kp C_MENU      &mt PSCRN LC(PSCRN)  &kp F9            &kp F10              &kp F11         &kp F12          &ext_power EP_TOG
&kp PSCRN      &kp LEFT               &kp DOWN           &kp RIGHT              &kp HOME             &kp END         &kp C_FF             &kp F5            &kp F6               &kp F7          &kp F8           &kp C_MUTE
&kp C_MENU     &HXT_L LCTRL C_AC_CUT  &HXT_L LALT LC(I)  &HXT_L LEFT_GUI LC(V)  &HXT_L LSHIFT PG_UP  &kp PG_DN       &kp C_RW             &HXT_R RSHIFT F1  &HXT_R RIGHT_GUI F2  &HXT_R RALT F3  &HXT_R RCTRL F4  &kp C_STOP
                                                         &to 0                  &kp C_VOL_DN         &kp C_VOL_UP    &kp C_PREV           &kp C_PLAY_PAUSE  &kp C_NEXT
            >;
        };

        mir-rgb {
            bindings = <
&kp LBKT        &kp P     &kp O    &kp I      &kp U      &kp Y        &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(67,100,50)  &rgb_ug RGB_COLOR_HSB(112,100,48)  &rgb_ug RGB_COLOR_HSB(186,100,50)  &rgb_ug RGB_COLOR_HSB(245,100,50)  &rgb_ug RGB_COLOR_HSB(287,100,50)
&kp APOS        &kp SEMI  &kp L    &kp K      &kp J      &kp H        &rgb_ug RGB_TOG                  &rgb_ug RGB_BRI                   &rgb_ug RGB_SAI                    &rgb_ug RGB_HUI                    &rgb_ug RGB_SPI                    &rgb_ug RGB_EFF
&sk LEFT_SHIFT  &kp FSLH  &kp DOT  &kp COMMA  &kp M      &kp N        &rgb_ug RGB_COLOR_HSB(0,0,0)     &rgb_ug RGB_BRD                   &rgb_ug RGB_SAD                    &rgb_ug RGB_HUD                    &rgb_ug RGB_SPD                    &rgb_ug RGB_EFR
                                   &trans     &kp SPACE  &kp ENTER    &bt BT_PRV                       &bt BT_NXT                        &out OUT_TOG
            >;
        };
    };
};
